{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set img = node.field_image.0.entity.uri.value ? file_url(node.field_image.0.entity.uri.value) : '' %}
{% set item_width = node.field_width.value %}
{% set item_height = node.field_height.value %}

{% if view_mode == 'teaser' and node.field_alert_level.target_id %}
  {% set background_color = node.field_background_color.color %}
  {% set overlay_background_color = node.field_overlay_background_color.color %}
{% endif %}

{% if view_mode == 'grid' and node.field_overlay_background_color.color %}
  {% set overlay_background_color = node.field_overlay_background_color.color %}
{% endif %}

{% if view_mode == 'grid' and node.field_background_color.color %}
  {% set background_color = node.field_background_color.color %}
{% endif %}

{% if node.field_white_text.value == 1 %}
  {% set white_text = 1 %}
{% endif %}

{% if node.field_url.uri %}
  {% set link = node.field_url.uri %}
{% else %}
  {% set link = url %}
{% endif %}

{% if view_mode == 'grid' %}
  {% set style = 'background-image: url(' ~ img  ~ ')' %}
{% endif %}

{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
    background_color ? 'has-background background-color-' ~ background_color,
    white_text ? 'white-text',
    node.field_top_padding.value ? 'top-padding-' ~ node.field_top_padding.value,
    content.field_image|render ? 'has-image',
  ]
%}

{% set wrapper_attributes = create_attribute() %}

{% 
  set wrapper_classes = [
    'view-grid-item',
    item_width ? 'item-width-' ~ item_width,
    item_width ? 'item-height-' ~ item_height,
  ]
%}

{%
  set content_classes = [
    'content',
    overlay_background_color ? 'has-background background-color-' ~ overlay_background_color,
  ]
%}

{% if view_mode == 'full' %}
  <div{{ attributes.addClass(classes) }}>
    <div class="inner">

      <footer class="byline">
        <div{{ author_attributes.addClass('author') }}>
          {% set createdDate = node.getCreatedTime|date('F j, Y') %}
          {% trans %}By {{ author_display_name }} - {{ createdDate }}{% endtrans %}
          {{ metadata }}
        </div>
      </footer>

      {{ content|without('links', 'field_image', 'field_blog', 'field_topics', 'field_featured', 'field_author') }}

      <div class="field--name-field-topics">

        <h2>Related topics</h2>

        {% for item in content.field_topics %}
          {% if item['#title'] %}
            {% set stub = item['#title'] %}
            <div class="field--item">
              <a href="/blog/topic/{{ stub|clean_class }}" class="link-item">{{ item['#title']  }}</a>
            </div>
          {% endif %}
        {% endfor %}

      </div>
    </div>
  </div>
{% else %}

  <article{{ attributes.addClass(classes).removeAttribute('role') }}>

    {% if content.field_image|render is not empty %}
      <div class="article-image">
        <a href="{{ url }}" rel="bookmark">{{ content.field_image }}</a>
      </div>
    {% endif %}

    <div class="article-content">
      {{ title_prefix }}
      {% if not page %}
        {% if view_mode == 'blog_teaser' %}
          <div class="blog-title">
            {% for item in content.field_blog %}
              {% if item['#title'] %}
                {% set stub = item['#title'] %}
                  <a href="/blog/{{ stub|clean_class }}" class="link-item">{{ item['#title']  }}</a>
              {% endif %}
            {% endfor %}
          </div>
        {% elseif '1' in content.field_featured[0] %}
          <div class="feature-label">Featured Post</div>
        {% endif %}
        <h2{{ title_attributes }}>
          <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h2>
      {% endif %}
      {{ title_suffix }}

      <footer>
        <div{{ author_attributes.addClass('author') }}>
          {% set createdDate = node.getCreatedTime|date('F j, Y') %}
          {% trans %}By {{ author_display_name }} - {{ createdDate }}{% endtrans %}
          {{ metadata }}
        </div>
      </footer>

      <div{{ content_attributes.addClass('content') }}>
        {{ content|without('links', 'field_image', 'field_topics', 'field_blog', 'field_featured', 'field_author') }}

        <p><a href="{{ url }}">Read more<span class="sr-only">{{ node.label }}</span></a></p>
      </div>
    </div>

  </article>

{% endif %}