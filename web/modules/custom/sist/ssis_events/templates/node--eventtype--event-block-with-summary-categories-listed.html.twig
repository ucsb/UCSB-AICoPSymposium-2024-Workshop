{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library('ssis_events/main-styling') }}
{{ attach_library('ssis_events/block-summary-styling') }}
{{ attach_library('ssis_events/block-scripts') }}

{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    node.field_top_padding.value ? 'top-padding-' ~ node.field_top_padding.value,
    node.field_bottom_padding.value ? 'bottom-padding-' ~ node.field_bottom_padding.value,
    'clearfix',
    'event-blocks-article'
  ] 
%}

{% set event_dates = node.field_eventtype_event_date[date_index] %}

{% set backgroundImageUrl = img_path %}
{% if node.field_eventtype_image.entity.field_media_image is not empty %}
      {% set backgroundImageUrl = file_url(node.field_eventtype_image.entity.field_media_image.entity.uri.value) %}
{% endif %}

{% set backgroundColor = '003660' %}
{% if node.field_eventtype_category.entity.field_eventtype_categorycolor is not empty %}
    {% set backgroundColor = node.field_eventtype_category.entity.field_eventtype_categorycolor.color|replace({'#': ''}) %}
{% endif %}


<article{{ attributes.addClass(classes) }}>
    <a href="{{ url }}">
        <div class="blk-template" style="background-image: url('{{ backgroundImageUrl }}');">            
            <div class="blk-caption has-background background-color-{{ backgroundColor }}">
                <div class="month">
                    {{ event_dates.value|date("M") }}
                </div>
                <div class="day">
                    {{ event_dates.value|date("j") }}
                </div>
            </div>
            <div class="blk-summary background-color-{{ backgroundColor }}">
                <div class="blk-summary-content">
                    <p class="eventtitle">{{ node.title.value }}</p>
                    <p class="eventdate caption">{{ event_dates.value|date("l\\, F jS\\, Y") }}  {{ event_dates.value|date("g:ia") }} - {{ event_dates.end_value|date("g:ia") }}</p>
                    
                    <div class="blk-description caption">
                        {% set event_categories = [] %}
                        {% for key, category in node.field_eventtype_category  %}
                            {% set event_categories = event_categories|merge([category.entity.name.0.value]) %}
                        {% endfor %}
                        <span class="category-text">{{ event_categories|join(', ') }}</span>
                    </div>
                    <p class="eventsummary">
                        {% if node.field_eventtype_description.0.summary is not empty %}
                            {{ node.field_eventtype_description.0.summary }}
                        {% endif %}
                    </p>
                    
                    <div class="summary-gradient">
                    </div>
                </div>
            </div>
        </div>
    </a>
</article>