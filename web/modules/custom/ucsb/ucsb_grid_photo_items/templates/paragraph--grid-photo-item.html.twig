{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('ucsb_grid_photo_items/main-styling') }}

{% set item_width = paragraph.field_item_width.value %}
{% set item_height = paragraph.field_item_height.value %}

{% if paragraph.field_background_color.color %}
  {% set background_color = paragraph.field_background_color.color %}
{% else %}
  {% set background_color = 'ffffff' %}
{% endif %}

{% if paragraph.field_item_image.entity.field_media_image is not empty %}
      {% set backgroundImageUrl = file_url(paragraph.field_item_image.entity.field_media_image.entity.uri.value) %}
{% endif %}




{% block paragraph %}

  {% if is_admin_route %}
    {{ content }}
  {% else %}

  {%
    set classes = [
      'grid-item',
      'grid-photo-item',
      item_height ? 'grid-item--height' ~ item_height,
      item_width ? 'grid-item--width' ~ item_width,
      paragraph.field_back.value ? 'read-more',
      paragraph.field_footer.value ? 'has-footer'
    ]
  %}
  <div{{ attributes.addClass(classes) }}>


    {% set inner_attribute = create_attribute() %}
    {%
      set inner_classes = [
        'inner',
        'inner-container',
        'has-background background-color-' ~ background_color,
        paragraph.field_front_alignment.value ? 'align-' ~ paragraph.field_front_alignment.value,
      ]
    %}
    <div{{ inner_attribute.addClass(inner_classes) }}>

      {# Front Side #}
      <div class="field field--name-field-front field--type-text-long field--label-hidden field--item image-container" style="background-image: url({{ backgroundImageUrl }});">
        
        
        {% set overlay_attribute = create_attribute() %}
        {%
          set overlay_classes = [
            'overlay',
            paragraph.field_back.value ? 'has-backside',
          ]
        %}
        {% if background_color != 'ffffff' %}
          {% set overlay_classes = overlay_classes|merge(['has-background background-color-' ~ background_color]) %}
        {% endif %}
        <div{{ overlay_attribute.addClass(overlay_classes) }}>
        </div>
        
        {# Front Text #}
        <div class="item-inner">
          {{ paragraph.field_front.value|raw }}
        </div>
        <div class="read-more-link caption" style="opacity: 1;z-index: 3;">
            Read more
        </div>
      </div>

      {# Back Side #}
      <div class="field field--name-field-back field--type-text-long field--label-hidden field--item has-background background-color-{{ background_color }}">
        <div class="item-inner">
          {{ paragraph.field_back.value|raw }}
        </div>
      </div>

    </div>
  </div>
  
  {% endif %}

{% endblock paragraph %}
